/*
This solution didn't pass even the very first test, but when manually changing the "params" in the compilers (i.e., the input system was not used), 
the output was always the correct answer, both for the proposed test and custom tests.
*/

package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func checkValue(i, j int, mp [][]int, n, m int) int {
	if i < 0 || j < 0 || i >= n || j >= m {
		return 0
	}
	if mp[i][j] == -1 {
		return 1
	}
	return 0
}

func checkBlock(i, j int, mp [][]int, n, m int) int {
	result := 0

	result += checkValue(i-1, j-1, mp, n, m)
	result += checkValue(i-1, j, mp, n, m)
	result += checkValue(i-1, j+1, mp, n, m)

	result += checkValue(i, j-1, mp, n, m)
	result += checkValue(i, j+1, mp, n, m)

	result += checkValue(i+1, j-1, mp, n, m)
	result += checkValue(i+1, j, mp, n, m)
	result += checkValue(i+1, j+1, mp, n, m)

	return result
}

func main() {
	file, _ := os.Open("input.txt")
	scanner := bufio.NewScanner(file)
	params := []string{}
	for scanner.Scan() {
		params = append(params, scanner.Text())
	}

	nmk := strings.Fields(params[0])
	n, _ := strconv.Atoi(nmk[0])
	m, _ := strconv.Atoi(nmk[1])
	k, _ := strconv.Atoi(nmk[2])

	mp := make([][]int, 0)
	for i := 0; i < n; i++ {
		mp = append(mp, make([]int, m))
	}

	for i := 0; i < k; i++ {
		numbers := strings.Fields(params[i])
		z, _ := strconv.Atoi(numbers[0])
		j, _ := strconv.Atoi(numbers[1])
		mp[z-1][j-1] = -1
	}
	for i := 0; i < n; i++ {
		for j := 0; j < m; j++ {
			if mp[i][j] != -1 {
				mp[i][j] = checkBlock(i, j, mp, n, m)
			}
		}
	}
	for _, line := range mp {
		for _, value := range line {
			if value == -1 {
				fmt.Printf("* ")
			} else {
				fmt.Printf("%d ", value)
			}
		}
		fmt.Println()
	}
}
